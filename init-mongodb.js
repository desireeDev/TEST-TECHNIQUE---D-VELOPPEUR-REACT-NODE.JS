// Script d'initialisation MongoDB pour le test technique React
// Ce script peuple la base de donn√©es avec le questionnaire pr√™t √† l'emploi

const { MongoClient } = require('mongodb');
const fs = require('fs');
const path = require('path');

// Configuration
const MONGODB_URI = process.env.MONGODB_URI || 'mongodb://localhost:27017';
const DB_NAME = 'questionnaire_db';

async function initializeDatabase() {
  const client = new MongoClient(MONGODB_URI);

  try {
    console.log('üîå Connexion √† MongoDB...');
    await client.connect();
    console.log('‚úÖ Connect√© √† MongoDB');

    const db = client.db(DB_NAME);

    // Supprimer les collections existantes pour une initialisation propre
    console.log('\nüóëÔ∏è  Nettoyage des collections existantes...');
    try {
      await db.collection('questions').drop();
      await db.collection('sessions').drop();
      console.log('‚úÖ Collections nettoy√©es');
    } catch (error) {
      console.log('‚ÑπÔ∏è  Aucune collection √† nettoyer (premi√®re initialisation)');
    }

    // Cr√©er les collections
    console.log('\nüì¶ Cr√©ation des collections...');
    const questionsCollection = db.collection('questions');
    const sessionsCollection = db.collection('sessions');

    // Charger les donn√©es du questionnaire
    console.log('\nüìÑ Chargement des donn√©es du questionnaire...');
    const questionnaireData = JSON.parse(
      fs.readFileSync(path.join(__dirname, 'questionnaire-data.json'), 'utf8')
    );

    // Ins√©rer le questionnaire
    console.log('üíæ Insertion du questionnaire...');
    const result = await questionsCollection.insertOne({
      ...questionnaireData.questionnaire,
      createdAt: new Date(),
      updatedAt: new Date(),
      isActive: true
    });
    console.log(`‚úÖ Questionnaire ins√©r√© avec l'ID: ${result.insertedId}`);

    // Cr√©er les index pour optimiser les requ√™tes
    console.log('\nüîç Cr√©ation des index...');
    await questionsCollection.createIndex({ id: 1 }, { unique: true });
    await sessionsCollection.createIndex({ sessionId: 1 }, { unique: true });
    await sessionsCollection.createIndex({ createdAt: -1 });
    await sessionsCollection.createIndex({ userId: 1 });
    console.log('‚úÖ Index cr√©√©s');

    // Cr√©er une session exemple (optionnel)
    console.log('\nüìù Cr√©ation d\'une session exemple...');
    const exampleSession = {
      sessionId: 'example-session-' + Date.now(),
      userId: 'demo-user',
      questionnaireId: questionnaireData.questionnaire.id,
      responses: {
        q1: { answer: 'Jean Dupont', questionId: 'q1', type: 'text' },
        q2: { answer: 'intermediate', questionId: 'q2', type: 'radio', score: 2 },
        q3: { answer: 'fullstack', questionId: 'q3', type: 'radio', score: 30 },
        q4: { answer: ['react', 'nextjs', 'vue'], questionId: 'q4', type: 'checkbox', score: 15 },
        q5: { answer: 'nextjs', questionId: 'q5', type: 'radio', score: 10 },
        q6: { answer: ['tailwind', 'css-modules'], questionId: 'q6', type: 'checkbox', score: 6 },
        q7: { answer: ['nodejs', 'python'], questionId: 'q7', type: 'checkbox', score: 10 },
        q8: { answer: ['postgresql', 'mongodb', 'redis'], questionId: 'q8', type: 'checkbox', score: 11 },
        q9: { answer: 'both', questionId: 'q9', type: 'radio', score: 10 },
        q10: { answer: ['vscode', 'git', 'docker'], questionId: 'q10', type: 'checkbox', score: 8 },
        q11: { answer: ['unit', 'e2e'], questionId: 'q11', type: 'checkbox', score: 9 },
        q12: { answer: 'always', questionId: 'q12', type: 'radio', score: 10 },
        q13: { answer: ['performance', 'architecture', 'cloud'], questionId: 'q13', type: 'checkbox', score: 15 },
        q14: { answer: 'product', questionId: 'q14', type: 'radio', score: 10 },
        q15: { answer: 'Une plateforme collaborative pour d√©veloppeurs', questionId: 'q15', type: 'textarea' }
      },
      progress: {
        currentStep: 5,
        completedSteps: [1, 2, 3, 4, 5],
        totalSteps: 5
      },
      totalScore: 146,
      isCompleted: true,
      startedAt: new Date(Date.now() - 600000), // 10 minutes ago
      completedAt: new Date(),
      createdAt: new Date(),
      updatedAt: new Date()
    };

    await sessionsCollection.insertOne(exampleSession);
    console.log('‚úÖ Session exemple cr√©√©e');

    // Afficher les statistiques
    console.log('\nüìä Statistiques de la base de donn√©es:');
    console.log(`   ‚Ä¢ Questionnaires: ${await questionsCollection.countDocuments()}`);
    console.log(`   ‚Ä¢ Sessions: ${await sessionsCollection.countDocuments()}`);

    // Afficher les informations du questionnaire
    console.log('\nüìã Informations du questionnaire:');
    console.log(`   ‚Ä¢ ID: ${questionnaireData.questionnaire.id}`);
    console.log(`   ‚Ä¢ Titre: ${questionnaireData.questionnaire.title}`);
    console.log(`   ‚Ä¢ Nombre d'√©tapes: ${questionnaireData.questionnaire.steps.length}`);
    console.log(`   ‚Ä¢ Total de questions: ${questionnaireData.metadata.totalQuestions}`);
    console.log(`   ‚Ä¢ Temps estim√©: ${questionnaireData.metadata.estimatedTime}`);

    console.log('\n‚ú® Initialisation termin√©e avec succ√®s!');
    console.log('\nüöÄ Vous pouvez maintenant lancer votre application Next.js');
    console.log('   Les candidats peuvent se concentrer sur React/Next.js sans cr√©er le contenu!\n');

  } catch (error) {
    console.error('‚ùå Erreur lors de l\'initialisation:', error);
    process.exit(1);
  } finally {
    await client.close();
    console.log('üëã D√©connexion de MongoDB\n');
  }
}

// Ex√©cuter l'initialisation
initializeDatabase();
