// app/api/responses/route.ts
import { NextResponse } from 'next/server';
import { sessionService } from '@/app/(backend)/services/session/sessionService'; // ‚ö†Ô∏è SINGLETON
import { SessionValidation } from '@/app/(backend)/lib/SchemaValidation';

/**
 * POST /api/responses
 * Endpoint pour sauvegarder les r√©ponses du questionnaire
 */
export async function POST(request: Request) {
  try {
    console.log(" Requ√™te POST re√ßue pour sauvegarder les r√©ponses");
    
    // 1. R√©cup√©ration et validation des donn√©es
    const body = await request.json();
    console.log(" Donn√©es re√ßues:", {
      sessionId: body.sessionId,
      progress: body.progress,
      nombreReponses: Object.keys(body.responses || {}).length
    });
    
    // 2. Validation des donn√©es client
    const validation = SessionValidation.validateSessionData(body);
    if (!validation.isValid) {
      console.warn("‚ùå Donn√©es invalides:", validation.errors);
      return NextResponse.json(
        { 
          error: 'Donn√©es invalides', 
          details: validation.errors 
        },
        { status: 400 }
      );
    }

    // 3. Sauvegarde avec le singleton
    const result = await sessionService.saveSession(body);

    console.log(" Session sauvegard√©e avec succ√®s:", {
      sessionId: result.sessionId,
      scoreCalcul√©: result.calculatedScore,
      cr√©√©e: result.created
    });

    // 4. R√©ponse de succ√®s
    return NextResponse.json({
      success: true,
      sessionId: result.sessionId,
      calculatedScore: result.calculatedScore,
      created: result.created,
      message: result.created ? 
        'Questionnaire compl√©t√© et score calcul√© avec succ√®s' : 
        'Progression sauvegard√©e et score mis √† jour'
    }, { 
      status: result.created ? 201 : 200 
    });

  } catch (error) {
    console.error('‚ùå Erreur sauvegarde session:', error);
    
    return NextResponse.json(
      { 
        error: 'Erreur serveur lors de la sauvegarde',
        ...(process.env.NODE_ENV === 'development' && {
          details: error instanceof Error ? error.message : 'Erreur inconnue'
        })
      },
      { status: 500 }
    );
  }
}

/**
 * GET /api/responses
 * Endpoint pour r√©cup√©rer les sessions questionnaire
 */
export async function GET(request: Request) {
  try {
    const { searchParams } = new URL(request.url);
    const sessionId = searchParams.get('sessionId');

    console.log("Requ√™te GET pour:", sessionId ? `session ${sessionId}` : 'toutes les sessions');

    if (sessionId) {
      // üîç MODE "SESSION SP√âCIFIQUE"
      console.log(" Recherche session sp√©cifique:", sessionId);
      
      const session = await sessionService.getSessionById(sessionId);
      
      if (!session) {
        console.warn(" Session non trouv√©e:", sessionId);
        return NextResponse.json(
          { error: 'Session non trouv√©e' },
          { status: 404 }
        );
      }

      console.log(" Session trouv√©e - Score:", session.totalScore);
      return NextResponse.json({ 
        session,
        message: 'Session r√©cup√©r√©e avec succ√®s'
      });

    } else {
      // üìã MODE "TOUTES LES SESSIONS"
      console.log(" R√©cup√©ration de toutes les sessions");
      const sessions = await sessionService.getAllSessions();
      
      console.log(` ${sessions.length} sessions r√©cup√©r√©es`);
      
      return NextResponse.json({ 
        sessions,
        count: sessions.length,
        message: sessions.length > 0 ? 
          `${sessions.length} sessions r√©cup√©r√©es` : 
          'Aucune session trouv√©e'
      });
    }

  } catch (error) {
    console.error(' Erreur r√©cup√©ration sessions:', error);
    
    return NextResponse.json(
      { 
        error: 'Erreur serveur lors de la r√©cup√©ration',
        ...(process.env.NODE_ENV === 'development' && {
          details: error instanceof Error ? error.message : 'Erreur inconnue'
        })
      },
      { status: 500 }
    );
  }
}

/**
 * PUT /api/responses
 * Endpoint pour mettre √† jour le score d'une session existante
 * 
 * UTILE pour : recalculer les scores si la logique de calcul change
 */
export async function PUT(request: Request) {
  try {
    const { searchParams } = new URL(request.url);
    const sessionId = searchParams.get('sessionId');
    
    if (!sessionId) {
      return NextResponse.json(
        { error: 'Param√®tre sessionId manquant' },
        { status: 400 }
      );
    }

    const body = await request.json();
    const { newScore } = body;

    if (typeof newScore !== 'number') {
      return NextResponse.json(
        { error: 'Le nouveau score doit √™tre un nombre' },
        { status: 400 }
      );
    }

    const result = await sessionService.updateSessionScore(sessionId, newScore);

    return NextResponse.json({
      success: true,
      sessionId,
      newScore,
      modified: result.modified,
      message: 'Score mis √† jour avec succ√®s'
    });

  } catch (error) {
    console.error(' Erreur mise √† jour score:', error);
    
    return NextResponse.json(
      { 
        error: 'Erreur lors de la mise √† jour du score',
        ...(process.env.NODE_ENV === 'development' && {
          details: error instanceof Error ? error.message : 'Erreur inconnue'
        })
      },
      { status: 500 }
    );
  }
}