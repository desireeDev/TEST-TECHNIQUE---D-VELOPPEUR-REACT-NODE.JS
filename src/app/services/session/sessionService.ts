// app/lib/services/sessionService.ts
import clientPromise from '@/app/lib/mongodb';
import { calculateTotalScore } from '@/app/utils/scoreCalculator';

/**
 * SERVICE : Logique m√©tier pour la gestion des sessions questionnaire
 * 
 * Ce service encapsule toute la logique d'interaction avec la base de donn√©es MongoDB
 * pour les op√©rations CRUD sur les sessions de questionnaire.
 * 
 * Principes SOLID appliqu√©s :
 * - Single Responsibility : G√®re uniquement les op√©rations sessions
 * - Separation of Concerns : S√©pare logique m√©tier et couche donn√©es
 */
export class SessionService {
  
  /**
   * Sauvegarde ou met √† jour une session questionnaire dans MongoDB
   * 
   * Utilise une op√©ration "upsert" (update + insert) pour :
   * - Mettre √† jour si la session existe d√©j√†
   * - Cr√©er si la session n'existe pas
   * 
   * NOUVEAU : Calcul automatique du score total si non fourni
   * 
   * @param sessionData - Les donn√©es de la session √† sauvegarder
   * @param sessionData.sessionId - Identifiant unique de la session
   * @param sessionData.responses - R√©ponses aux questions (objet cl√©-valeur)
   * @param sessionData.progress - √âtat d'avancement du questionnaire
   * @param sessionData.totalScore - Score total calcul√© (optionnel)
   * @param sessionData.userId - Identifiant utilisateur (optionnel)
   * 
   * @returns Promise<{success: boolean, sessionId: string, created: boolean, modified: boolean, calculatedScore: number}>
   *          R√©sultat de l'op√©ration avec indicateurs de cr√©ation/modification et score calcul√©
   */
  async saveSession(sessionData: {
    sessionId: string;
    responses: Record<string, any>;
    progress: any;
    totalScore?: number;
    userId?: string;
  }) {
    // Connexion √† la base de donn√©es MongoDB
    const client = await clientPromise;
    const db = client.db('questionnaire_db');
    
    // Destructuration des donn√©es pour plus de clart√©
    const { sessionId, responses, progress, totalScore, userId } = sessionData;

    // ====================================================================
    // üéØ CALCUL AUTOMATIQUE DU SCORE SI NON FOURNI
    // ====================================================================
    const calculatedScore = totalScore !== undefined ? totalScore : calculateTotalScore(responses);
    
    console.log(" Score calcul√©:", {
      scoreFourni: totalScore,
      scoreCalcule: calculatedScore,
      reponses: Object.keys(responses).length
    });

    // Op√©ration MongoDB : updateOne avec upsert=true
    const result = await db.collection('sessions').updateOne(
      // FILTRE : Recherche par sessionId
      { sessionId },
      {
        // OPERATEUR $set : Met √† jour les champs existants
        $set: {
          responses,           // R√©ponses aux questions
          progress,            // Progression (√©tape actuelle, total)
          totalScore: calculatedScore, // ‚ö†Ô∏è UTILISE LE SCORE CALCUL√â
          userId: userId || null,      // ID utilisateur (null si anonyme)
          updatedAt: new Date(),       // Horodatage de mise √† jour
          
          // Si c'est la derni√®re √©tape, marquer comme compl√©t√©
          ...(progress.currentStep === progress.totalSteps && {
            isCompleted: true,         // Flag de compl√©tion
            completedAt: new Date()    // Date de fin
          })
        },
        // OPERATEUR $setOnInsert : D√©finit les valeurs uniquement √† l'insertion
        $setOnInsert: {
          createdAt: new Date(),       // Date de cr√©ation
          startedAt: new Date(),       // Date de d√©but
          questionnaireId: 'dev-profile-2024' // Identifiant du questionnaire
        }
      },
      // OPTION upsert : Cr√©e le document s'il n'existe pas
      { upsert: true }
    );

    // Retourne un objet de r√©sultat clair
    return {
      success: true,                    // Op√©ration r√©ussie
      sessionId,                       // ID de la session trait√©e
      created: result.upsertedCount > 0, // True si nouvelle cr√©ation
      modified: result.modifiedCount > 0, // True si mise √† jour
      calculatedScore: calculatedScore  // ‚ö†Ô∏è AJOUT : Score calcul√© retourn√©
    };
  }

  /**
   * R√©cup√®re une session sp√©cifique par son identifiant unique
   * 
   * Utilis√© pour afficher les d√©tails d'une session particuli√®re
   * sur la page de r√©sultats d√©taill√©s.
   * 
   * @param sessionId - L'identifiant unique de la session √† r√©cup√©rer
   * @returns Promise<Session | null> - La session trouv√©e ou null si non trouv√©e
   */
  async getSessionById(sessionId: string) {
    try {
      // Connexion √† la base de donn√©es
      const client = await clientPromise;
      const db = client.db('questionnaire_db');
      
      // Recherche de la session avec projection pour s√©lectionner les champs
      const session = await db.collection('sessions').findOne(
        // FILTRE : Par sessionId exact
        { sessionId },
        {
          // PROJECTION : S√©lectionne uniquement les champs n√©cessaires
          projection: {
            _id: 0,           // Exclut l'ID interne MongoDB (s√©curit√©)
            sessionId: 1,     // Inclut l'ID m√©tier
            responses: 1,     // R√©ponses aux questions
            progress: 1,      // √âtat de progression
            totalScore: 1,    // Score total
            completedAt: 1,   // Date de compl√©tion
            createdAt: 1,     // Date de cr√©ation
            isCompleted: 1    // Flag de compl√©tion
          }
        }
      );

      return session;
    } catch (error) {
      // Log d√©taill√© en cas d'erreur (console serveur)
      console.error('‚ùå Erreur r√©cup√©ration session:', error);
      // Propagation de l'erreur pour gestion au niveau sup√©rieur
      throw error;
    }
  }

  /**
   * R√©cup√®re toutes les sessions compl√©t√©es pour l'historique
   * 
   * Retourne les sessions tri√©es par date de compl√©tion d√©croissante
   * (les plus r√©centes en premier). Seules les sessions marqu√©es
   * comme "compl√©t√©es" sont retourn√©es.
   * 
   * @returns Promise<Array<Session>> - Tableau des sessions compl√©t√©es
   */
  async getAllSessions() {
    try {
      const client = await clientPromise;
      const db = client.db('questionnaire_db');
      
      // Requ√™te MongoDB avec filtre, projection et tri
      const sessions = await db.collection('sessions')
        .find(
          // FILTRE : Uniquement les sessions compl√©t√©es
          { isCompleted: true },
          {
            // PROJECTION : Champs √† inclure dans le r√©sultat
            projection: {
              _id: 0,           // Exclut l'ID MongoDB
              sessionId: 1,     // ID de session
              responses: 1,     // R√©ponses
              totalScore: 1,    // Score
              completedAt: 1,   // Date fin
              createdAt: 1      // Date cr√©ation
            }
          }
        )
        // TRI : Par date de compl√©tion d√©croissante (r√©cent ‚Üí ancien)
        .sort({ completedAt: -1 })
        // CONVERSION : Curseur MongoDB ‚Üí Tableau JavaScript
        .toArray();

      return sessions;
    } catch (error) {
      console.error('‚ùå Erreur r√©cup√©ration sessions:', error);
      throw error;
    }
  }

  /**
   * R√©cup√®re les sessions d'un utilisateur sp√©cifique
   * 
   * Version filtr√©e de getAllSessions() pour un utilisateur donn√©.
   * Utile pour un syst√®me d'authentification multi-utilisateurs.
   * 
   * @param userId - Identifiant de l'utilisateur
   * @returns Promise<Array<Session>> - Sessions de l'utilisateur
   */
  async getUserSessions(userId: string) {
    try {
      const client = await clientPromise;
      const db = client.db('questionnaire_db');
      
      const sessions = await db.collection('sessions')
        .find(
          // FILTRE COMBIN√â : Utilisateur + sessions compl√©t√©es
          { userId, isCompleted: true },
          {
            projection: {
              _id: 0,
              sessionId: 1,
              responses: 1,
              totalScore: 1,
              completedAt: 1
            }
          }
        )
        .sort({ completedAt: -1 })
        .toArray();

      return sessions;
    } catch (error) {
      console.error('‚ùå Erreur r√©cup√©ration sessions utilisateur:', error);
      throw error;
    }
  }

  /**
   * Met √† jour uniquement le score d'une session existante
   * 
   * Utile pour recalculer les scores si la logique de calcul change
   * 
   * @param sessionId - Identifiant de la session
   * @param newScore - Nouveau score √† appliquer
   * @returns Promise<{success: boolean, modified: boolean}>
   */
  async updateSessionScore(sessionId: string, newScore: number) {
    try {
      const client = await clientPromise;
      const db = client.db('questionnaire_db');
      
      const result = await db.collection('sessions').updateOne(
        { sessionId },
        {
          $set: {
            totalScore: newScore,
            updatedAt: new Date()
          }
        }
      );

      return {
        success: true,
        modified: result.modifiedCount > 0
      };
    } catch (error) {
      console.error('‚ùå Erreur mise √† jour score:', error);
      throw error;
    }
  }

  /**
   * Supprime une session sp√©cifique
   * 
   * @param sessionId - Identifiant de la session √† supprimer
   * @returns Promise<{success: boolean, deleted: boolean}>
   */
  async deleteSession(sessionId: string) {
    try {
      const client = await clientPromise;
      const db = client.db('questionnaire_db');
      
      const result = await db.collection('sessions').deleteOne({ sessionId });

      return {
        success: true,
        deleted: result.deletedCount > 0
      };
    } catch (error) {
      console.error('‚ùå Erreur suppression session:', error);
      throw error;
    }
  }
}