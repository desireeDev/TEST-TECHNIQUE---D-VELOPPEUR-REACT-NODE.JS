// app/api/responses/route.ts
import { NextResponse } from 'next/server';
import { SessionService } from '@/app/services/session/sessionService';
import { SessionValidation } from '@/app/lib/SchemaValidation';

/**
 * POST /api/responses
 * Endpoint pour sauvegarder les r√©ponses du questionnaire
 * 
 * NOUVEAU : Calcul automatique du score c√¥t√© serveur
 * 
 * Bonnes pratiques impl√©ment√©es :
 * ‚úÖ S√©paration logique m√©tier (SessionService)
 * ‚úÖ Validation des donn√©es client  
 * ‚úÖ Gestion d'erreurs structur√©e
 * ‚úÖ Logs d'erreurs serveur
 * ‚úÖ Calcul automatique des scores
 */
export async function POST(request: Request) {
  try {
    console.log("üì• Requ√™te POST re√ßue pour sauvegarder les r√©ponses");
    
    // 1. R√©cup√©ration et validation des donn√©es
    const body = await request.json();
    console.log("üì¶ Donn√©es re√ßues:", {
      sessionId: body.sessionId,
      progress: body.progress,
      nombreReponses: Object.keys(body.responses || {}).length
    });
    
    // 2. VALIDATION : Ne jamais faire confiance aux donn√©es client
    const validation = SessionValidation.validateSessionData(body);
    if (!validation.isValid) {
      console.warn("‚ùå Donn√©es invalides:", validation.errors);
      return NextResponse.json(
        { 
          error: 'Donn√©es invalides', 
          details: validation.errors 
        },
        { status: 400 } // 400 Bad Request
      );
    }

    // 3. Appel du service m√©tier (calcul automatique du score int√©gr√©)
    const sessionService = new SessionService();
    const result = await sessionService.saveSession(body);

    console.log("‚úÖ Session sauvegard√©e avec succ√®s:", {
      sessionId: result.sessionId,
      scoreCalcul√©: result.calculatedScore,
      cr√©√©e: result.created
    });

    // 4. R√©ponse de succ√®s avec score calcul√©
    return NextResponse.json({
      success: true,
      sessionId: result.sessionId,
      calculatedScore: result.calculatedScore, // ‚ö†Ô∏è NOUVEAU : Score calcul√©
      created: result.created,
      message: result.created ? 
        'Questionnaire compl√©t√© et score calcul√© avec succ√®s' : 
        'Progression sauvegard√©e et score mis √† jour'
    }, { 
      status: result.created ? 201 : 200 
    });

  } catch (error) {
    // 5. GESTION D'ERREURS : Logs serveur + r√©ponse appropri√©e
    console.error('‚ùå Erreur sauvegarde session:', error);
    
    return NextResponse.json(
      { 
        error: 'Erreur serveur lors de la sauvegarde',
        // Ne pas exposer les d√©tails techniques en production
        ...(process.env.NODE_ENV === 'development' && {
          details: error instanceof Error ? error.message : 'Erreur inconnue'
        })
      },
      { status: 500 } // 500 Internal Server Error
    );
  }
}

/**
 * GET /api/responses
 * Endpoint pour r√©cup√©rer les sessions questionnaire
 * 
 * Deux modes de fonctionnement :
 * - Sans param√®tre : retourne toutes les sessions (pour l'historique)
 * - Avec sessionId : retourne une session sp√©cifique (pour les d√©tails)
 * 
 * NOUVEAU : Retourne les scores calcul√©s automatiquement
 * 
 * Bonnes pratiques impl√©ment√©es :
 * ‚úÖ Gestion des param√®tres d'URL
 * ‚úÖ R√©ponses HTTP appropri√©es (200, 404, 500) 
 * ‚úÖ Logs d'erreurs serveur
 * ‚úÖ S√©curit√© : ne pas exposer les erreurs techniques en production
 */
export async function GET(request: Request) {
  try {
    // 1. EXTRACTION DES PARAM√àTRES D'URL
    const { searchParams } = new URL(request.url);
    const sessionId = searchParams.get('sessionId');

    console.log("üîç Requ√™te GET pour:", sessionId ? `session ${sessionId}` : 'toutes les sessions');

    // 2. INITIALISATION DU SERVICE M√âTIER
    const sessionService = new SessionService();

    // 3. LOGIQUE DE ROUTAGE SELON LES PARAM√àTRES
    if (sessionId) {
      // üîç MODE "SESSION SP√âCIFIQUE" - R√©cup√©ration d'une session par son ID
      console.log("üîç Recherche session sp√©cifique:", sessionId);
      
      const session = await sessionService.getSessionById(sessionId);
      
      // 4. GESTION DU CAS "NON TROUV√â"
      if (!session) {
        console.warn("‚ùå Session non trouv√©e:", sessionId);
        return NextResponse.json(
          { error: 'Session non trouv√©e' },
          { status: 404 } // 404 Not Found
        );
      }

      // 5. R√âPONSE DE SUCC√àS - Session trouv√©e avec score
      console.log("‚úÖ Session trouv√©e - Score:", session.totalScore);
      return NextResponse.json({ 
        session,
        message: 'Session r√©cup√©r√©e avec succ√®s'
      });

    } else {
      // üìã MODE "TOUTES LES SESSIONS" - R√©cup√©ration de l'historique complet
      console.log("üìã R√©cup√©ration de toutes les sessions");
      const sessions = await sessionService.getAllSessions();
      
      console.log(`‚úÖ ${sessions.length} sessions r√©cup√©r√©es`);
      
      // Retourne toujours un tableau, m√™me vide
      return NextResponse.json({ 
        sessions,
        count: sessions.length,
        message: sessions.length > 0 ? 
          `${sessions.length} sessions r√©cup√©r√©es` : 
          'Aucune session trouv√©e'
      });
    }

  } catch (error) {
    // 6. GESTION D'ERREURS GLOBALES
    console.error('‚ùå Erreur r√©cup√©ration sessions:', error);
    
    // 7. R√âPONSE D'ERREUR STANDARDIS√âE
    return NextResponse.json(
      { 
        error: 'Erreur serveur lors de la r√©cup√©ration',
        // En d√©veloppement, on inclut plus de d√©tails pour le debug
        ...(process.env.NODE_ENV === 'development' && {
          details: error instanceof Error ? error.message : 'Erreur inconnue'
        })
        // En production, on ne expose pas les d√©tails techniques pour la s√©curit√©
      },
      { status: 500 } // 500 Internal Server Error
    );
  }
}

/**
 * PUT /api/responses
 * Endpoint pour mettre √† jour le score d'une session existante
 * 
 * UTILE pour : recalculer les scores si la logique de calcul change
 */
export async function PUT(request: Request) {
  try {
    const { searchParams } = new URL(request.url);
    const sessionId = searchParams.get('sessionId');
    
    if (!sessionId) {
      return NextResponse.json(
        { error: 'Param√®tre sessionId manquant' },
        { status: 400 }
      );
    }

    const body = await request.json();
    const { newScore } = body;

    if (typeof newScore !== 'number') {
      return NextResponse.json(
        { error: 'Le nouveau score doit √™tre un nombre' },
        { status: 400 }
      );
    }

    const sessionService = new SessionService();
    const result = await sessionService.updateSessionScore(sessionId, newScore);

    return NextResponse.json({
      success: true,
      sessionId,
      newScore,
      modified: result.modified,
      message: 'Score mis √† jour avec succ√®s'
    });

  } catch (error) {
    console.error('‚ùå Erreur mise √† jour score:', error);
    
    return NextResponse.json(
      { 
        error: 'Erreur lors de la mise √† jour du score',
        ...(process.env.NODE_ENV === 'development' && {
          details: error instanceof Error ? error.message : 'Erreur inconnue'
        })
      },
      { status: 500 }
    );
  }
}